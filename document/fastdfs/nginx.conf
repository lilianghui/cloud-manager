#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       mime.types;
  default_type  application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  #gzip  on;

  #设置group1的服务器
  upstream fdfs_group1 {
    server 10.250.209.43:8080 weight=1 max_fails=2 fail_timeout=30s;
  }


  ##cache##
  proxy_connect_timeout 500;
  #跟后端服务器连接的超时时间_发起握手等候响应超时时间
  proxy_read_timeout 600;
  #连接成功后_等候后端服务器响应的时间_其实已经进入后端的排队之中等候处理
  proxy_send_timeout 500;
  #后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有数据
  proxy_buffer_size 128k;
  #代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可
  proxy_buffers 4 128k;
  #同上 告诉Nginx保存单个用的几个Buffer最大用多大空间
  proxy_busy_buffers_size 256k;
  #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
  proxy_temp_file_write_size 128k;
  #proxy缓存临时文件的大小
  proxy_temp_path /usr/local/nginx/temp;
  #用于指定本地目录来缓冲较大的代理请求
  proxy_cache_path /usr/local/nginx/cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;
  #设置web缓存区名为cache_one,内存缓存空间大小为12000M，自动清除超过15天没有被访问过的缓存数据，硬盘缓存空间大小200g

  server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;



    location ~ /attachment/base64/{
      default_type 'text/plain';
      content_by_lua '
        function trim(s) return (string.gsub(s, "^%s*(.-)%s*$", "%1").gsub(s, "/attachment/base64/", ""))end
        local request_uri = trim(ngx.var.request_uri)
        ngx.say(ngx.decode_base64(request_uri))
      ';
    }

    #设置group1的负载均衡参数
    location ~ /group[0-9]/M00 {
      if ($arg_attname ~ "^(.+)") {
        #设置下载
        add_header Content-Type application/x-download;
        #设置文件名
        add_header Content-Disposition "attachment;filename=$arg_attname";
      }
      proxy_pass http://fdfs_group1;
        proxy_redirect off;
      proxy_cache cache_one;
      #此处的cache_one必须于上一步配置的缓存区域名称相同
      proxy_cache_valid 200 304 12h;
      proxy_cache_valid 301 302 1d;
      proxy_cache_valid any 1m;
      #不同的请求设置不同的缓存时效
      proxy_cache_key $uri$is_args$args;
      #生产缓存文件的key，通过4个string变量结合生成
      expires 30d;
      #其余类型的缓存时效为30天
      #proxy_set_header X-Forwarded-Proto $scheme;
    }
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
  }


  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #    listen       8000;
  #    listen       somename:8080;
  #    server_name  somename  alias  another.alias;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}


  # HTTPS server
  #
  #server {
  #    listen       443 ssl;
  #    server_name  localhost;

  #    ssl_certificate      cert.pem;
  #    ssl_certificate_key  cert.key;

  #    ssl_session_cache    shared:SSL:1m;
  #    ssl_session_timeout  5m;

  #    ssl_ciphers  HIGH:!aNULL:!MD5;
  #    ssl_prefer_server_ciphers  on;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}

}
